import { c as createComponent, b as createAstro, a as renderTemplate, d as defineScriptVars, r as renderComponent, m as maybeRenderHead, e as addAttribute } from '../chunks/astro/server_B0cD9c7h.mjs';
import 'kleur/colors';
import { $ as $$HeroCapabilityConsulting } from '../chunks/HeroCapabilityConsulting_BGQwxdAb.mjs';
import { $ as $$Layout, c as HERO_LEARNING_EXPERIENCE_PLATFORM, L as LEARNING_IMAGE1, d as LEARNING_IMAGE2, e as LEARNING_IMAGE3, C as COLLABORATION, F as FORUM, S as SEARCHINSIGHTS, A as ADSCLICK2, f as STAR, T as TACTIC, g as CHATBUBBLE, h as ADSCLICK, i as AUTOMATION, j as LOGOMARK } from '../chunks/Layout_3xoq29x_.mjs';
import { $ as $$ContactUsMiniCards } from '../chunks/ContactUsMiniCards_BSwJc-Cw.mjs';
import { $ as $$Image } from '../chunks/_astro_assets_9oR7zwhu.mjs';
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$CapabilityConsulting = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$CapabilityConsulting;
  const whyChooseUsData = [
    {
      title: "Experience Experts",
      content: "With decades of consulting experience, we understand the complexities of your SDV transformation. We craft tailored strategies to help you overcome these challenges with precision, ensuring you stay on track every step of the way."
    },
    {
      title: "Proven Approaches",
      content: "With decades of consulting experience, we understand the complexities of your SDV transformation. We craft tailored strategies to help you overcome these challenges with precision, ensuring you stay on track every step of the way."
    },
    {
      title: "Flexible Implementation",
      content: "With decades of consulting experience, we understand the complexities of your SDV transformation. We craft tailored strategies to help you overcome these challenges with precision, ensuring you stay on track every step of the way."
    },
    {
      title: "Building Internal Strength",
      content: "With decades of consulting experience, we understand the complexities of your SDV transformation. We craft tailored strategies to help you overcome these challenges with precision, ensuring you stay on track every step of the way."
    }
  ];
  const uniqueId = `why-choose-us-${Math.random().toString(36).substr(2, 9)}`;
  return renderTemplate(_a || (_a = __template(["", " <script>(function(){", "\n  (function() {\n    const SECTION_ID = uniqueId;\n    let animationInstance = null;\n  \n    class WhyChooseUsAnimation {\n      constructor(sectionId) {\n        this.sectionId = sectionId;\n        this.current = 0;\n        this.isAnimating = false;\n        this.sections = [];\n        this.interval = null;\n        this.isActive = false;\n        this.isPaused = false;\n        this.hoverContainer = null;\n        this.startTime = 0;\n        this.pausedProgress = 0;\n        this.animationDuration = 7000;\n      }\n  \n      init() {\n        this.cleanup();\n        this.findSections();\n        \n        if (this.sections.length > 0) {\n          this.setupSections();\n          this.setupEventListeners();\n          this.startAnimation();\n          this.isActive = true;\n        }\n      }\n  \n      findSections() {\n        const container = document.querySelector(`[data-animation-section=\"${this.sectionId}\"]`);\n        if (container) {\n          this.sections = Array.from(container.querySelectorAll('.section'));\n          this.hoverContainer = container.querySelector(`[data-hover-container=\"${this.sectionId}\"]`);\n        }\n      }\n  \n      setupEventListeners() {\n        // Hover events for pause/resume\n        if (this.hoverContainer) {\n          this.hoverContainer.addEventListener('mouseenter', this.handleMouseEnter.bind(this));\n          this.hoverContainer.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\n        }\n  \n        // Click events for manual navigation\n        this.sections.forEach((section, index) => {\n          section.addEventListener('click', this.handleSectionClick.bind(this, index));\n        });\n      }\n  \n      handleMouseEnter() {\n        this.pauseAnimation();\n      }\n  \n      handleMouseLeave() {\n        this.resumeAnimation();\n      }\n  \n      handleSectionClick(index) {\n        this.goToSection(index);\n      }\n  \n      setupSections() {\n        this.sections.forEach((sec) => {\n          const title = sec.querySelector('[data-title]');\n          const barBg = sec.querySelector('[data-bar-bg]');\n          const desc = sec.querySelector('[data-description]');\n          const progress = sec.querySelector('[data-progress]');\n          \n          if (title && barBg) {\n            barBg.style.height = `${title.offsetHeight}px`;\n          }\n          \n          if (desc) {\n            desc.classList.add('opacity-0', 'max-h-0');\n            desc.classList.remove('opacity-100', 'max-h-[300px]');\n          }\n          \n          if (progress) {\n            progress.style.height = '0px';\n            \n          }\n          \n          sec.classList.add('opacity-50');\n        });\n  \n        if (this.sections[0]) {\n          this.expandSection(this.sections[0]);\n        }\n      }\n  \n      startAnimation() {\n        this.stopAnimation();\n        this.startTime = Date.now();\n        this.pausedProgress = 0;\n        \n        this.interval = setInterval(() => {\n          if (this.isAnimating || this.sections.length === 0) return;\n          \n          if (!this.isPaused) {\n            const elapsed = Date.now() - this.startTime + this.pausedProgress;\n            \n            if (elapsed >= this.animationDuration) {\n              this.advanceToNext();\n            }\n          }\n        }, 50);\n      }\n  \n      advanceToNext() {\n        if (this.isAnimating) return;\n        \n        this.isAnimating = true;\n        const next = (this.current + 1) % this.sections.length;\n        \n        this.collapseSection(this.sections[this.current])\n          .then(() => this.expandSection(this.sections[next]))\n          .then(() => {\n            this.current = next;\n            this.isAnimating = false;\n            this.resetTimer();\n          })\n          .catch(() => {\n            this.isAnimating = false;\n            this.resetTimer();\n          });\n      }\n  \n      resetTimer() {\n        this.startTime = Date.now();\n        this.pausedProgress = 0;\n      }\n  \n      pauseAnimation() {\n        if (this.isPaused) return;\n        \n        this.isPaused = true;\n        this.pausedProgress += Date.now() - this.startTime;\n        \n        // Pause the progress bar animation\n        const currentSection = this.sections[this.current];\n        if (currentSection) {\n          const progress = currentSection.querySelector('[data-progress]');\n          if (progress) {\n            const computedStyle = window.getComputedStyle(progress);\n            const currentHeight = computedStyle.height;\n            progress.style.transition = 'none';\n            progress.style.height = currentHeight;\n          }\n        }\n      }\n  \n      resumeAnimation() {\n        if (!this.isPaused) return;\n        \n        this.isPaused = false;\n        this.startTime = Date.now();\n        \n        // Resume the progress bar animation\n        const currentSection = this.sections[this.current];\n        if (currentSection) {\n          const progress = currentSection.querySelector('[data-progress]');\n          const barBg = currentSection.querySelector('[data-bar-bg]');\n          \n          if (progress && barBg) {\n            const totalHeight = parseInt(barBg.style.height);\n            const remainingTime = this.animationDuration - this.pausedProgress;\n            \n            if (remainingTime > 0) {\n              progress.style.transition = `height ${remainingTime}ms linear`;\n              progress.style.height = `${totalHeight}px`;\n            }\n          }\n        }\n      }\n  \n      goToSection(index) {\n        if (this.isAnimating || index === this.current || index >= this.sections.length) return;\n        \n        this.isAnimating = true;\n        this.isPaused = false; // Ensure we're not paused after click\n        \n        this.collapseSection(this.sections[this.current])\n          .then(() => this.expandSection(this.sections[index]))\n          .then(() => {\n            this.current = index;\n            this.isAnimating = false;\n            this.resetTimer();\n          })\n          .catch(() => {\n            this.isAnimating = false;\n            this.resetTimer();\n          });\n      }\n  \n      stopAnimation() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n      }\n  \n      cleanup() {\n        this.stopAnimation();\n        this.isActive = false;\n        this.isPaused = false;\n        \n        // Remove event listeners\n        if (this.hoverContainer) {\n          this.hoverContainer.removeEventListener('mouseenter', this.handleMouseEnter.bind(this));\n          this.hoverContainer.removeEventListener('mouseleave', this.handleMouseLeave.bind(this));\n        }\n        \n        this.sections.forEach((section, index) => {\n          section.removeEventListener('click', this.handleSectionClick.bind(this, index));\n        });\n      }\n  \n      expandSection(section) {\n        return new Promise((resolve) => {\n          if (!section) {\n            resolve();\n            return;\n          }\n  \n          const title = section.querySelector('[data-title]');\n          const desc = section.querySelector('[data-description]');\n          const progress = section.querySelector('[data-progress]');\n          const barBg = section.querySelector('[data-bar-bg]');\n  \n          if (!title || !desc || !progress || !barBg) {\n            resolve();\n            return;\n          }\n  \n          const titleHeight = title.offsetHeight;\n          const descHeight = desc.scrollHeight;\n          const totalHeight = titleHeight + descHeight;\n  \n          section.classList.remove('opacity-50');\n  \n          barBg.style.transition = 'height 0.3s ease-in-out';\n          barBg.style.height = `${totalHeight}px`;\n  \n          desc.classList.remove('opacity-0', 'max-h-0');\n          desc.classList.add('opacity-100', 'max-h-[300px]');\n  \n          progress.style.transition = 'none';\n          progress.style.height = '0px';\n          void progress.offsetHeight;\n  \n          progress.style.transition = 'height 7s linear';\n          progress.style.height = `${totalHeight}px`;\n  \n          setTimeout(resolve, 300);\n        });\n      }\n  \n      collapseSection(section) {\n        return new Promise((resolve) => {\n          if (!section) {\n            resolve();\n            return;\n          }\n  \n          const title = section.querySelector('[data-title]');\n          const desc = section.querySelector('[data-description]');\n          const progress = section.querySelector('[data-progress]');\n          const barBg = section.querySelector('[data-bar-bg]');\n  \n          if (!title || !desc || !progress || !barBg) {\n            resolve();\n            return;\n          }\n  \n          const titleHeight = title.offsetHeight;\n  \n          desc.classList.remove('opacity-100', 'max-h-[300px]');\n          desc.classList.add('opacity-0', 'max-h-0');\n  \n          progress.style.transition = 'height 0.7s ease-in-out';\n          progress.style.height = `${titleHeight}px`;\n  \n          barBg.style.transition = 'height 0.7s ease-in-out';\n          barBg.style.height = `${titleHeight}px`;\n  \n          setTimeout(() => {\n            section.classList.add('opacity-50');\n            resolve();\n          }, 700);\n        });\n      }\n    }\n  \n    function initializeAnimation() {\n      if (animationInstance) {\n        animationInstance.cleanup();\n      }\n      \n      animationInstance = new WhyChooseUsAnimation(SECTION_ID);\n      \n      // Use setTimeout to ensure DOM is ready\n      setTimeout(() => {\n        animationInstance.init();\n      }, 100);\n    }\n  \n    function cleanupAnimation() {\n      if (animationInstance) {\n        animationInstance.cleanup();\n        animationInstance = null;\n      }\n    }\n  \n    // Event listeners for different scenarios\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', initializeAnimation);\n    } else {\n      initializeAnimation();\n    }\n  \n    // Astro navigation events\n    document.addEventListener('astro:page-load', initializeAnimation);\n    document.addEventListener('astro:after-swap', initializeAnimation);\n    document.addEventListener('astro:before-preparation', cleanupAnimation);\n  \n    // Regular navigation cleanup\n    window.addEventListener('beforeunload', cleanupAnimation);\n  \n    // Store cleanup function globally for manual cleanup if needed\n    window[`cleanup_${SECTION_ID}`] = cleanupAnimation;\n  })();\n  })();<\/script>"], ["", " <script>(function(){", "\n  (function() {\n    const SECTION_ID = uniqueId;\n    let animationInstance = null;\n  \n    class WhyChooseUsAnimation {\n      constructor(sectionId) {\n        this.sectionId = sectionId;\n        this.current = 0;\n        this.isAnimating = false;\n        this.sections = [];\n        this.interval = null;\n        this.isActive = false;\n        this.isPaused = false;\n        this.hoverContainer = null;\n        this.startTime = 0;\n        this.pausedProgress = 0;\n        this.animationDuration = 7000;\n      }\n  \n      init() {\n        this.cleanup();\n        this.findSections();\n        \n        if (this.sections.length > 0) {\n          this.setupSections();\n          this.setupEventListeners();\n          this.startAnimation();\n          this.isActive = true;\n        }\n      }\n  \n      findSections() {\n        const container = document.querySelector(\\`[data-animation-section=\"\\${this.sectionId}\"]\\`);\n        if (container) {\n          this.sections = Array.from(container.querySelectorAll('.section'));\n          this.hoverContainer = container.querySelector(\\`[data-hover-container=\"\\${this.sectionId}\"]\\`);\n        }\n      }\n  \n      setupEventListeners() {\n        // Hover events for pause/resume\n        if (this.hoverContainer) {\n          this.hoverContainer.addEventListener('mouseenter', this.handleMouseEnter.bind(this));\n          this.hoverContainer.addEventListener('mouseleave', this.handleMouseLeave.bind(this));\n        }\n  \n        // Click events for manual navigation\n        this.sections.forEach((section, index) => {\n          section.addEventListener('click', this.handleSectionClick.bind(this, index));\n        });\n      }\n  \n      handleMouseEnter() {\n        this.pauseAnimation();\n      }\n  \n      handleMouseLeave() {\n        this.resumeAnimation();\n      }\n  \n      handleSectionClick(index) {\n        this.goToSection(index);\n      }\n  \n      setupSections() {\n        this.sections.forEach((sec) => {\n          const title = sec.querySelector('[data-title]');\n          const barBg = sec.querySelector('[data-bar-bg]');\n          const desc = sec.querySelector('[data-description]');\n          const progress = sec.querySelector('[data-progress]');\n          \n          if (title && barBg) {\n            barBg.style.height = \\`\\${title.offsetHeight}px\\`;\n          }\n          \n          if (desc) {\n            desc.classList.add('opacity-0', 'max-h-0');\n            desc.classList.remove('opacity-100', 'max-h-[300px]');\n          }\n          \n          if (progress) {\n            progress.style.height = '0px';\n            \n          }\n          \n          sec.classList.add('opacity-50');\n        });\n  \n        if (this.sections[0]) {\n          this.expandSection(this.sections[0]);\n        }\n      }\n  \n      startAnimation() {\n        this.stopAnimation();\n        this.startTime = Date.now();\n        this.pausedProgress = 0;\n        \n        this.interval = setInterval(() => {\n          if (this.isAnimating || this.sections.length === 0) return;\n          \n          if (!this.isPaused) {\n            const elapsed = Date.now() - this.startTime + this.pausedProgress;\n            \n            if (elapsed >= this.animationDuration) {\n              this.advanceToNext();\n            }\n          }\n        }, 50);\n      }\n  \n      advanceToNext() {\n        if (this.isAnimating) return;\n        \n        this.isAnimating = true;\n        const next = (this.current + 1) % this.sections.length;\n        \n        this.collapseSection(this.sections[this.current])\n          .then(() => this.expandSection(this.sections[next]))\n          .then(() => {\n            this.current = next;\n            this.isAnimating = false;\n            this.resetTimer();\n          })\n          .catch(() => {\n            this.isAnimating = false;\n            this.resetTimer();\n          });\n      }\n  \n      resetTimer() {\n        this.startTime = Date.now();\n        this.pausedProgress = 0;\n      }\n  \n      pauseAnimation() {\n        if (this.isPaused) return;\n        \n        this.isPaused = true;\n        this.pausedProgress += Date.now() - this.startTime;\n        \n        // Pause the progress bar animation\n        const currentSection = this.sections[this.current];\n        if (currentSection) {\n          const progress = currentSection.querySelector('[data-progress]');\n          if (progress) {\n            const computedStyle = window.getComputedStyle(progress);\n            const currentHeight = computedStyle.height;\n            progress.style.transition = 'none';\n            progress.style.height = currentHeight;\n          }\n        }\n      }\n  \n      resumeAnimation() {\n        if (!this.isPaused) return;\n        \n        this.isPaused = false;\n        this.startTime = Date.now();\n        \n        // Resume the progress bar animation\n        const currentSection = this.sections[this.current];\n        if (currentSection) {\n          const progress = currentSection.querySelector('[data-progress]');\n          const barBg = currentSection.querySelector('[data-bar-bg]');\n          \n          if (progress && barBg) {\n            const totalHeight = parseInt(barBg.style.height);\n            const remainingTime = this.animationDuration - this.pausedProgress;\n            \n            if (remainingTime > 0) {\n              progress.style.transition = \\`height \\${remainingTime}ms linear\\`;\n              progress.style.height = \\`\\${totalHeight}px\\`;\n            }\n          }\n        }\n      }\n  \n      goToSection(index) {\n        if (this.isAnimating || index === this.current || index >= this.sections.length) return;\n        \n        this.isAnimating = true;\n        this.isPaused = false; // Ensure we're not paused after click\n        \n        this.collapseSection(this.sections[this.current])\n          .then(() => this.expandSection(this.sections[index]))\n          .then(() => {\n            this.current = index;\n            this.isAnimating = false;\n            this.resetTimer();\n          })\n          .catch(() => {\n            this.isAnimating = false;\n            this.resetTimer();\n          });\n      }\n  \n      stopAnimation() {\n        if (this.interval) {\n          clearInterval(this.interval);\n          this.interval = null;\n        }\n      }\n  \n      cleanup() {\n        this.stopAnimation();\n        this.isActive = false;\n        this.isPaused = false;\n        \n        // Remove event listeners\n        if (this.hoverContainer) {\n          this.hoverContainer.removeEventListener('mouseenter', this.handleMouseEnter.bind(this));\n          this.hoverContainer.removeEventListener('mouseleave', this.handleMouseLeave.bind(this));\n        }\n        \n        this.sections.forEach((section, index) => {\n          section.removeEventListener('click', this.handleSectionClick.bind(this, index));\n        });\n      }\n  \n      expandSection(section) {\n        return new Promise((resolve) => {\n          if (!section) {\n            resolve();\n            return;\n          }\n  \n          const title = section.querySelector('[data-title]');\n          const desc = section.querySelector('[data-description]');\n          const progress = section.querySelector('[data-progress]');\n          const barBg = section.querySelector('[data-bar-bg]');\n  \n          if (!title || !desc || !progress || !barBg) {\n            resolve();\n            return;\n          }\n  \n          const titleHeight = title.offsetHeight;\n          const descHeight = desc.scrollHeight;\n          const totalHeight = titleHeight + descHeight;\n  \n          section.classList.remove('opacity-50');\n  \n          barBg.style.transition = 'height 0.3s ease-in-out';\n          barBg.style.height = \\`\\${totalHeight}px\\`;\n  \n          desc.classList.remove('opacity-0', 'max-h-0');\n          desc.classList.add('opacity-100', 'max-h-[300px]');\n  \n          progress.style.transition = 'none';\n          progress.style.height = '0px';\n          void progress.offsetHeight;\n  \n          progress.style.transition = 'height 7s linear';\n          progress.style.height = \\`\\${totalHeight}px\\`;\n  \n          setTimeout(resolve, 300);\n        });\n      }\n  \n      collapseSection(section) {\n        return new Promise((resolve) => {\n          if (!section) {\n            resolve();\n            return;\n          }\n  \n          const title = section.querySelector('[data-title]');\n          const desc = section.querySelector('[data-description]');\n          const progress = section.querySelector('[data-progress]');\n          const barBg = section.querySelector('[data-bar-bg]');\n  \n          if (!title || !desc || !progress || !barBg) {\n            resolve();\n            return;\n          }\n  \n          const titleHeight = title.offsetHeight;\n  \n          desc.classList.remove('opacity-100', 'max-h-[300px]');\n          desc.classList.add('opacity-0', 'max-h-0');\n  \n          progress.style.transition = 'height 0.7s ease-in-out';\n          progress.style.height = \\`\\${titleHeight}px\\`;\n  \n          barBg.style.transition = 'height 0.7s ease-in-out';\n          barBg.style.height = \\`\\${titleHeight}px\\`;\n  \n          setTimeout(() => {\n            section.classList.add('opacity-50');\n            resolve();\n          }, 700);\n        });\n      }\n    }\n  \n    function initializeAnimation() {\n      if (animationInstance) {\n        animationInstance.cleanup();\n      }\n      \n      animationInstance = new WhyChooseUsAnimation(SECTION_ID);\n      \n      // Use setTimeout to ensure DOM is ready\n      setTimeout(() => {\n        animationInstance.init();\n      }, 100);\n    }\n  \n    function cleanupAnimation() {\n      if (animationInstance) {\n        animationInstance.cleanup();\n        animationInstance = null;\n      }\n    }\n  \n    // Event listeners for different scenarios\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', initializeAnimation);\n    } else {\n      initializeAnimation();\n    }\n  \n    // Astro navigation events\n    document.addEventListener('astro:page-load', initializeAnimation);\n    document.addEventListener('astro:after-swap', initializeAnimation);\n    document.addEventListener('astro:before-preparation', cleanupAnimation);\n  \n    // Regular navigation cleanup\n    window.addEventListener('beforeunload', cleanupAnimation);\n  \n    // Store cleanup function globally for manual cleanup if needed\n    window[\\`cleanup_\\${SECTION_ID}\\`] = cleanupAnimation;\n  })();\n  })();<\/script>"])), renderComponent($$result, "Layout", $$Layout, {}, { "default": ($$result2) => renderTemplate` ${renderComponent($$result2, "HeroCapabilityConsulting", $$HeroCapabilityConsulting, { "content": "Empowering innovators to lead in the AI-driven future of automotive R&D.", "image": HERO_LEARNING_EXPERIENCE_PLATFORM })} ${maybeRenderHead()}<section class="px-4 sm:px-8 md:px-16 lg:px-44 xl:px-56 py-16 md:py-24 space-y-16"${addAttribute(uniqueId, "data-animation-section")}> <!-- Content Section --> <div class="flex flex-col lg:flex-row gap-12"> <div class="w-full lg:w-1/2"> <p class="text-[#002166] text-2xl sm:text-xl md:text-5xl max-w-xl font-semibold">Overcoming Key Challenges in the SDV Transformation Journey</p> </div> <div class="w-full lg:w-1/2 space-y-8"${addAttribute(uniqueId, "data-hover-container")}> <div class="flex flex-col gap-4 h-[20rem]"${addAttribute(uniqueId, "data-sections-container")}> ${whyChooseUsData.map((item, index) => renderTemplate`<div class="section flex items-start gap-4 opacity-50 transition-opacity duration-500 cursor-pointer"${addAttribute(index, "data-section")}${addAttribute(index, "data-clickable-section")}> <!-- Progress Bar --> <div class="relative w-1 flex-shrink-0 h-auto" data-bar> <div class="bg-[#d2e1ff] rounded-full w-full" data-bar-bg></div> <div class="bg-[#002166] rounded-full w-full absolute left-0 top-0" data-progress></div> </div> <!-- Text --> <div> <h3 class="font-bold text-[#002166] text-lg sm:text-xl md:text-2xl" data-title> ${item.title} </h3> <p class="text-[#4c5967] text-base sm:text-lg max-h-0 opacity-0 overflow-hidden transition-all duration-700 ease-in-out" data-description> ${item.content} </p> </div> </div>`)} </div> </div> </div> </section> <section class="h-full px-4 sm:px-8 md:px-16 lg:px-28 xl:px-[14rem] bg-white mb-16"> <!-- Sticky Title Block --> <div class="relative"> <div class="sticky top-[5rem] bg-white z-20 py-0 pt-2 md:py-4 mb-8"> <span class="text-blue-600 text-xl">Our Expertise</span> <h2 class="text-[#002166] text-2xl sm:text-xl md:text-5xl font-semibold max-w-5xl">
Getting you ready for success through our own experience
</h2> </div> <div class="sticky top-[10rem] space-y-[2rem]"> <!-- CARD 1 --> <div class="bg-[#1A49AD] w-full rounded-2xl pl-0 md:flex justify-between gap-8 sticky min-h-max top-[13rem] md:top-[15rem] z-[1] overflow-hidden"> <!-- Left Text Block --> <div class="max-w-2xl z-10 flex flex-col justify-start p-8 w-full md:w-[50%]"> <h3 class="text-lg sm:text-2xl md:text-2xl lg:text-2xl xl:text-2xl 2xl:text-3xl font-semibold text-white max-w-[23rem] mb-4">
Transformation Management Office
</h3> <p class="mt-2 text-white text-md sm:text-sm md:text-sm lg:text-sm xl:text-sm 2xl:text-lg max-w-[27rem]">
We help you shape your SDV transformation based on where you are today by building tailored use cases, aligning roles across leaders and teams, and creating a clear roadmap. By Integrating AI-powered tools, we boost how your organisation designs, develops, and tests—so you move faster and smarter across the board.​
</p> </div> <!-- Right Image Section --> <div class="relative w-full md:w-[50%] flex justify-end items-center mt-6 md:mt-0"> <div class="w-full h-full aspect-video"> ${renderComponent($$result2, "Image", $$Image, { "src": LEARNING_IMAGE1, "alt": "Workflow UI Preview", "class": "w-full h-full object-cover" })} </div> </div> </div> <!-- CARD 2 --> <div class="bg-[#1563ff] w-[100%] rounded-2xl pl-0 md:flex justify-between gap-8 sticky min-h-max top-[15rem] md:top-[17rem] z-[2] overflow-hidden"> <div class="max-w-2xl z-10 flex flex-col justify-start  p-8 w-full md:w-[50%]"> <h3 class="text-lg sm:text-2xl md:text-2xl lg:text-2xl xl:text-2xl 2xl:text-3xl font-semibold text-white max-w-[23rem] mb-4">
Insights & Capability Building​
</h3> <p class="mt-2 text-white text-md sm:text-sm md:text-sm lg:text-sm xl:text-sm 2xl:text-lg  max-w-[27rem]">
We identify gaps across your skills, tools, and tech—then bridge them, whether through internal growth or external acquisions. Our AI-enhanced insights guide better decisions around suppliers, roles, and use cases—so you're investing in capabilities that truly accelerate your SDV journey.​
</p> </div> <div class="relative w-full md:w-[50%] flex justify-end items-center mt-6 md:mt-0"> <div class="w-full h-full aspect-video"> ${renderComponent($$result2, "Image", $$Image, { "src": LEARNING_IMAGE2, "alt": "Workflow UI Preview", "class": "w-full h-full object-cover" })} </div> </div> </div> <!-- CARD 3 --> <div class="bg-[#013399] w-full rounded-2xl pl-0 md:flex justify-between gap-8 sticky min-h-max top-[17rem] md:top-[19rem] z-[3] overflow-hidden"> <div class="max-w-2xl z-10 flex flex-col justify-start p-8 w-full md:w-[50%]"> <h3 class="text-lg sm:text-2xl md:text-2xl lg:text-2xl xl:text-2xl 2xl:text-3xl font-semibold text-white max-w-[23rem] mb-4">
Competence Development Consulting​
</h3> <p class="mt-2 text-white text-md sm:text-sm md:text-sm lg:text-sm xl:text-sm 2xl:text-lg  max-w-[27rem]">
We can help the companies to validate the reference architecture, help to implement the processes like DevOps, CI/CD, DataOps, and AI tools.
</p> <p class="mt-2 text-white text-md sm:text-sm md:text-sm lg:text-sm xl:text-sm 2xl:text-lg  max-w-[27rem]">
How to move to cloud to build clone to perform virtual design and testing. How to improve the security architecture.
</p> </div> <div class="relative w-full md:w-[50%] flex justify-end items-center mt-6 md:mt-0"> <div class="w-full h-full aspect-video"> ${renderComponent($$result2, "Image", $$Image, { "src": LEARNING_IMAGE3, "alt": "Workflow UI Preview", "class": "w-full h-full object-cover" })} </div> </div> </div> <div class="w-full sticky min-h-[5rem] top-[19rem] z-[1] overflow-hidden"></div> </div> </div> </section> <section class="px-4 sm:px-8 md:px-16 lg:px-44 xl:px-56 bg-[#f6f9ff] py-12 h-full mb-24 "> <!-- Begin Sticky Scroll Section --> <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 relative"> <!-- Left Sticky Image --> <div class="relative h-full"> <div class="sticky top-[9rem]"> <div class="flex flex-col gap-2 mb-6"> <span class="text-blue-600 text-xl">Our Process</span> <h2 class="text-[#002166] text-2xl sm:text-xl md:text-3xl lg:text-5xl font-semibold max-w-md mb-6 text-left">
This is how our collaboration works
</h2> </div> <!-- Placeholder for collaboration image --> ${renderComponent($$result2, "Image", $$Image, { "src": COLLABORATION, "alt": "Collaboration Image", "class": "hidden md:block w-full max-w-[35rem] object-contain rounded-2xl" })} </div> </div> <!-- Right Content --> <div class="flex flex-col gap-12 text-[#1563FF] max-w-md pt-0 md:pt-24"> <!-- Step 1 --> <div class="flex gap-4"> <div class="flex-shrink-0 z-10"> <div class="w-12 h-12 bg-[#ffb700] rounded-full flex items-center justify-center"> ${renderComponent($$result2, "Image", $$Image, { "src": FORUM, "alt": "Step 1 Image", "class": "w-6 h-6 object-contain z-20" })} </div> </div> <div class="flex flex-col gap-2"> <div class="flex flex-col gap-1"> <span class="text-[#002166] text-lg font-semibold">Step 1:</span> <h3 class="text-[#002166] font-bold text-2xl">
Let's Get Aligned
</h3> </div> <p class="text-lg leading-relaxed text-[#4c5967]">
We start by understanding your strategic vision and where your product is headed. This ensures everything we do supports your long-term goals and innovation plans from day one.
</p> </div> </div> <!-- Step 2 --> <div class="flex gap-4"> <div class="flex-shrink-0 z-10"> <div class="w-12 h-12 bg-[#ffb700] rounded-full flex items-center justify-center"> ${renderComponent($$result2, "Image", $$Image, { "src": SEARCHINSIGHTS, "alt": "Step 1 Image", "class": "w-6 h-6 object-contain z-20" })} </div> </div> <div class="flex flex-col gap-2"> <div class="flex flex-col gap-1"> <span class="text-[#002166] text-lg font-semibold">Step 2:</span> <h3 class="text-[#002166] font-bold text-2xl">
Diagnose the Now
</h3> </div> <p class="text-lg leading-relaxed text-[#4c5967]">
Through a detailed assessment, we map out your current SDV maturity, team skillsets, and product environment—building a clear picture of where you are and where you need to go.
</p> </div> </div> <!-- Step 3 --> <div class="flex gap-4"> <div class="flex-shrink-0 z-10"> <div class="w-12 h-12 bg-[#ffb700] rounded-full flex items-center justify-center"> ${renderComponent($$result2, "Image", $$Image, { "src": ADSCLICK2, "alt": "Step 1 Image", "class": "w-6 h-6 object-contain z-20" })} </div> </div> <div class="flex flex-col gap-2"> <div class="flex flex-col gap-1"> <span class="text-[#002166] text-lg font-semibold">Step 3:</span> <h3 class="text-[#002166] font-bold text-2xl">
Define the Focus
</h3> </div> <p class="text-lg leading-relaxed text-[#4c5967]">
Together, we pinpoint the areas where we can make the biggest impact. It's all about finding the levers that will accelerate your SDV transformation most effectively.
</p> </div> </div> <!-- Step 4 --> <div class="flex gap-4"> <div class="flex-shrink-0 z-10"> <div class="w-12 h-12 bg-[#ffb700] rounded-full flex items-center justify-center"> ${renderComponent($$result2, "Image", $$Image, { "src": STAR, "alt": "Step 1 Image", "class": "w-6 h-6 object-contain z-20" })} </div> </div> <div class="flex flex-col gap-2"> <div class="flex flex-col gap-1"> <span class="text-[#002166] text-lg font-semibold">Step 4:</span> <h3 class="text-[#002166] font-bold text-2xl">
Unlock with AI
</h3> </div> <p class="text-lg leading-relaxed text-[#4c5967]">
Using our AI-powered tools, we identify the right use cases, key skills, enabling tech, and ideal partners—bringing clarity and precision to every decision.
</p> </div> </div> <!-- Step 5 --> <div class="flex gap-4"> <div class="flex-shrink-0 z-10"> <div class="w-12 h-12 bg-[#ffb700] rounded-full flex items-center justify-center"> ${renderComponent($$result2, "Image", $$Image, { "src": TACTIC, "alt": "Step 1 Image", "class": "w-6 h-6 object-contain " })} </div> </div> <div class="flex flex-col gap-2"> <div class="flex flex-col gap-1"> <span class="text-[#002166] text-lg font-semibold">Step 5:</span> <h3 class="text-[#002166] font-bold text-2xl">
Shift into Gear
</h3> </div> <p class="text-lg leading-relaxed text-[#4c5967]">
We help launch organizational structures where needed—moving toward a software-first mindset that fosters agility, innovation, and stronger collaboration across teams.
</p> </div> </div> </div> <hr class="hidden absolute left-0 top-0 border-2 rotate-90 border-[#fff5dd] w-[60rem]"> </div> </section> <section class="px-4 sm:px-8 md:px-16 lg:px-44 xl:px-56 py-16 md:py-24 space-y-16"> <!-- Title --> <div class="text-center mb-8"> <span class="text-blue-600 font-medium block text-base sm:text-lg">
How to Contact Us
</span> <h2 class="text-[#002166] text-3xl sm:text-4xl md:text-5xl font-bold mt-2">
Your Path to Success is Set
</h2> </div> <!-- Mini Cards --> <div class="flex flex-col sm:flex-row justify-between gap-6 mb-6"> ${renderComponent($$result2, "ContactUsMiniCards", $$ContactUsMiniCards, { "icon": CHATBUBBLE, "content": "Contact us via contact form" })} ${renderComponent($$result2, "ContactUsMiniCards", $$ContactUsMiniCards, { "icon": ADSCLICK, "content": "Define your needs" })} ${renderComponent($$result2, "ContactUsMiniCards", $$ContactUsMiniCards, { "icon": AUTOMATION, "content": "Implement the solution" })} </div> <!-- CTA Box --> <div class="relative bg-blue-600 rounded-2xl text-white px-6 sm:px-12 md:px-14 py-12 sm:py-20 overflow-hidden"> <div class="flex flex-col gap-4 relative z-10 max-w-xl"> <span class="text-2xl sm:text-3xl md:text-4xl font-semibold">
Get in touch with our experts
</span> <span class="text-sm sm:text-base md:text-lg font-light text-[#dce7ff]">
We can guide you to find the right solution for your needs
</span> <a href="/contact-us"> <button class="bg-white cursor-pointer text-blue-600 w-fit px-6 py-2 rounded-full font-medium hover:bg-gray-100 transition">
Talk To An Expert
</button> </a> </div> <!-- Background Logo --> ${renderComponent($$result2, "Image", $$Image, { "src": LOGOMARK, "alt": "Logo Mark", "class": "absolute top-0 right-0 w-1/2 h-full opacity-90 mix-blend-overlay pointer-events-none object-cover" })} </div> </section> ` }), defineScriptVars({ uniqueId }));
}, "C:/Users/GokulDS/Desktop/ssr/src/pages/capability-consulting.astro", void 0);

const $$file = "C:/Users/GokulDS/Desktop/ssr/src/pages/capability-consulting.astro";
const $$url = "/capability-consulting";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$CapabilityConsulting,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
